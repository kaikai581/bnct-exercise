#!/usr/bin/env python
'''
This script takes as input preprocessed data prepared with the data_utilities.py script and make all kinds of distributions for exploratory analysis.
'''

import matplotlib
from matplotlib.pyplot import xlabel
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import argparse
import data_utilities
import os
import pandas as pd
import seaborn as sns
import sys

class neutron_from_target:
    '''
    A class for neutron data analysis.
    '''
    def __init__(self, infpn, include_other_daughters=False):
        '''
        Constructor to load data into pandas dataframes.
        '''
        fext = os.path.splitext(infpn)[1]
        if fext == '.csv':
            self.df_neutron = pd.read_csv(infpn)
        elif fext == '.h5':
            self.df_neutron = pd.read_hdf(infpn, key='secondary')
        else:
            print('File format not supported. Use only .csv or .h5.')
            sys.exit(-1)
        # include or not other daughter particles produced with neutrons
        if not include_other_daughters:
            self.df_neutron = self.df_neutron[self.df_neutron.particle_name == 'neutron']
        
        # neutrons generated by secondaries are group into one category
        self.group_equations()
    
    def group_equations(self):
        '''
        Check if neutrons belong to simplified categories and designate.
        '''
        self.df_neutron['nuclear process'] = self.df_neutron['equation'].apply(self.simplify_process_categories)

    def simplify_process_categories(self, eqn_str):
        '''
        Since it is quite cumbersome to track processes in which neutrons are produced by secondary particles,
        they are simply grouped into one category called "neutrons produced by secondaries".
        '''
        _, daughters = data_utilities.parse_equation(eqn_str)
        if not 'neutron' in daughters:
            return 'neutrons produced by secondaries'
        return eqn_str

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input_file', type=str, default=os.path.join(data_utilities.get_git_root(__file__), 'data/p_on_be/pandas/neutron_preview.csv'))
    args = parser.parse_args()
    infpn = args.input_file

    # configure pandas to print all rows
    # pd.set_option('display.max_rows', None)

    # load dataframe
    ndata = neutron_from_target(infpn)
    # print(ndata.df_neutron)

    # create output folder
    outdir = 'plots'
    if not os.path.exists(outdir):
        os.makedirs(outdir)

    # plot nuclear process vs neutron kinetic energy
    sns_plot = sns.catplot(x='ke', y='equation', kind='boxen', data=ndata.df_neutron.sort_values('equation'))
    sns_plot.set(xlabel='neutron kinetic energy (MeV)', ylabel='nuclear process')
    sns_plot.savefig('plots/neutron_full_category_vs_kinetic_energy.png')
    sns_plot = sns.catplot(x='ke', y='nuclear process', kind='boxen', data=ndata.df_neutron.sort_values('nuclear process'))
    sns_plot.set(xlabel='neutron kinetic energy (MeV)', ylabel='nuclear process')
    sns_plot.savefig('plots/neutron_simplified_category_vs_kinetic_energy.png')

    # plot neutron kinetic energy by category
    sns_plot = sns.displot(ndata.df_neutron, x='ke', hue='nuclear process', element='step')
    sns_plot.set(xlabel='neutron kinetic energy (MeV)', ylabel='counts')
    sns_plot.savefig('plots/neutron_kinetic_energy_by_simplified_category.png')
